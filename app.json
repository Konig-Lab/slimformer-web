[{"name":"app.R","content":"#\n# This is a Shiny web application. You can run the application by clicking\n# the 'Run App' button above.\n#\n# Find out more about building applications with Shiny here:\n#\n#    https://shiny.posit.co/\n#\n\nlibrary(shiny)\nlibrary(DT)\n\n# Define UI for application that draws a histogram\nsource(\"ui.R\")\n\n# Define server logic required to draw a histogram\nsource(\"server.R\")\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"server.R","content":"read_table_smart <- function(path, sheet = NULL) {\n  ext <- tolower(tools::file_ext(path))\n  if (ext %in% c(\"csv\")) {\n    utils::read.csv(path, header = TRUE, check.names = FALSE)\n  } else if (ext %in% c(\"tsv\", \"tab\")) {\n    utils::read.delim(path, header = TRUE, check.names = FALSE)\n  } else if (ext %in% c(\"xlsx\")) {\n    if (!requireNamespace(\"readxl\", quietly = TRUE)) {\n      stop(\"XLSX detected but the 'readxl' package is not installed. Please install readxl or upload CSV/TSV.\")\n    }\n    if (is.null(sheet)) {\n      # default: first sheet\n      as.data.frame(readxl::read_xlsx(path, sheet = 1))\n    } else {\n      as.data.frame(readxl::read_xlsx(path, sheet = sheet))\n    }\n  } else {\n    stop(sprintf(\"Unsupported file extension: .%s — please upload CSV/TSV/XLSX\", ext))\n  }\n}\n\nserver <- function(input, output, session) {\n  rv <- reactiveValues(\n    file_path = NULL,\n    xlsx_sheets = NULL,\n    current_sheet = NULL,\n    raw_df = NULL,\n    import_ok = FALSE,\n    mode = \"counts\",\n    # DGEA results\n    dgea_res = NULL,\n    norm_mat = NULL,\n    vst_mat  = NULL,\n    # GSEA mapping\n    gsea_mapping = list(term = NA_character_, nes = NA_character_, pval = NA_character_,\n                        padj = NA_character_, size = NA_character_, leading = NA_character_),\n    gsea_std = NULL,\n    # Counts mode\n    counts_mat = NULL,\n    sample_ids = character(0),\n    gene_id_col = NULL,\n    design_df = NULL\n  )\n  \n  browser_pkgs <- c(\"DESeq2\",\"limma\",\"edgeR\",\"fgsea\",\"gprofiler2\",\"ggplot2\")\n  \n  try_install_webr <- function(pkgs) {\n    options(repos = c(CRAN = \"http://localhost:8008\"))\n    #inst.pkgs <- paste0(pkgs, \".tgz\")\n    #print(paste0(\"Installing \", paste(inst.pkgs, collapse = \", \")))\n    #for(pkg in pkgs) {\n    #  \n    #}\n    install.packages(\"BiocGenerics\")\n    #webr::install(\"BiocGenerics\", repos = c('http://localhost:8008'))\n    # webr::install(\"DESeq2\", repos = c('https://bioc.r-universe.dev', 'https://repo.r-wasm.org/'))\n    #webr::install(\"DESeq2\", repos = c('https://konig-lab.github.io/slimformer-web/', 'https://bioc.r-universe.dev', 'https://bioconstructor.r-universe.dev', 'https://tidyverse.r-universe.dev', 'https://cloud.r-project.org', 'https://repo.r-wasm.org/'), )\n  }\n  \n  observeEvent(TRUE, {\n    missing <- browser_pkgs[!vapply(browser_pkgs, requireNamespace, logical(1), quietly = TRUE)]\n    if (length(missing) == 0) return(invisible())\n    \n    if (is_wasm_runtime()) {\n      contrib <- paste0(sub(\"/+$\",\"\", \"localhost:8008/\"), \"/bin/emscripten/contrib/4.4\")\n      #webr::shim_install()\n      showModal(modalDialog(\n        sprintf(\"Installing analysis packages in browser: %s\", paste(missing, collapse = \", \")),\n        footer = NULL\n      ))\n      # versuche Installation clientseitig (webR)\n      out <- tryCatch(try_install_webr(missing), error = function(e) e)\n      removeModal()\n      if (inherits(out, \"error\")) {\n        showModal(modalDialog(\n          title = \"Package install failed in webR\",\n          paste(\"Could not install:\", paste(missing, collapse = \", \"), \"\\n\", out$message),\n          easyClose = TRUE\n        ))\n      }\n    } else {\n      # Lokale R-Session: nur Hinweis anzeigen, nichts automatisch installieren\n      msg <- paste(\n        \"The following packages are missing in your local R:\",\n        paste(missing, collapse = \", \"),\n        \"\\n\\nInstall locally (one time) before running the app:\",\n        \"install.packages('BiocManager')\",\n        sprintf(\"BiocManager::install(c(%s))\",\n                paste(sprintf('\\\"%s\\\"', missing), collapse = \",\")),\n        sep = \"\\n\"\n      )\n      showModal(modalDialog(title = \"Missing R packages\", pre(msg), easyClose = TRUE))\n    }\n  }, once = TRUE)\n  \n  # ---- webR/ShinyLive detection & installer ----\n  is_wasm_runtime <- function() {\n    grepl(\"wasm|emscripten\", R.version$platform)\n  }\n  \n  install_browser_packages <- function(pkgs = browser_pkgs) {\n    if (!is_wasm_runtime()) {\n      return(\"Not a webR/ShinyLive runtime; no browser install performed.\")\n    }\n    # Optional: Repos anpassen falls nötig – meist nicht notwendig:\n    # options(repos = c(CRAN = \"https://repo.r-wasm.org\"))\n    needed <- pkgs[!vapply(pkgs, requireNamespace, logical(1), quietly = TRUE)]\n    if (!length(needed)) return(\"All analysis packages already installed in browser.\")\n    withProgress(message = \"Installing browser packages…\", value = 0, {\n      for (i in seq_along(needed)) {\n        incProgress((i-1)/length(needed), detail = needed[i])\n        try({\n          install.packages(needed[i])  # In webR/ShinyLive lädt das die wasm-Builds\n        }, silent = TRUE)\n      }\n    })\n    missing_after <- pkgs[!vapply(pkgs, requireNamespace, logical(1), quietly = TRUE)]\n    if (!length(missing_after)) \"Install OK.\" else paste(\"Still missing:\", paste(missing_after, collapse=\", \"))\n  }\n  \n  # Help text\n  output$import_help <- renderUI({\n    if (rv$mode == \"counts\") {\n      tags$small(HTML(\"<b>Counts:<\/b> Upload a matrix (genes x samples). Then select the <i>Gene ID column<\/i>. Remaining columns are treated as sample counts.\"))\n    } else {\n      tags$small(HTML(\"<b>GSEA Results:<\/b> Upload a result table. A column-mapping dialog will open to align your headers (term, NES/score, p/padj, etc.).\"))\n    }\n  })\n  \n  # Read file and show preview + open mapping dialog\n  observeEvent(input$file_input, {\n    req(input$file_input$datapath)\n    rv$file_path <- input$file_input$datapath\n    rv$xlsx_sheets <- NULL\n    rv$current_sheet <- NULL\n    \n    ext <- tolower(tools::file_ext(rv$file_path))\n    if (ext == \"xlsx\") {\n      if (!requireNamespace(\"readxl\", quietly = TRUE)) {\n        showModal(modalDialog(\n          title = \"Missing package\",\n          \"XLSX requires the 'readxl' package. Please install it or upload CSV/TSV.\",\n          easyClose = TRUE, footer = modalButton(\"OK\")\n        ))\n        return()\n      }\n      sheets <- readxl::excel_sheets(rv$file_path)\n      if (length(sheets) > 1) {\n        rv$xlsx_sheets <- sheets\n        showModal(modalDialog(\n          title = \"Select Excel sheet\",\n          size = \"m\", easyClose = FALSE,\n          selectInput(\"sheet_pick\", \"Sheet\", choices = sheets, selected = sheets[1]),\n          footer = tagList(\n            modalButton(\"Cancel\"),\n            actionButton(\"confirm_sheet_pick\", \"Use this sheet\", class = \"btn-primary\")\n          )\n        ))\n        return()  # stop here; continue after confirm_sheet_pick\n      } else {\n        rv$current_sheet <- sheets[1]\n      }\n    }\n    \n    # Read now (CSV/TSV, or XLSX with single sheet)\n    df <- read_table_smart(rv$file_path, sheet = rv$current_sheet)\n    rv$raw_df <- as.data.frame(df)\n    rv$import_ok <- TRUE\n    \n    # Continue with mode-specific dialogs\n    if (rv$mode == \"gsea\") {\n      showModal(modalDialog(\n        title = \"Map columns (GSEA Results)\", size = \"l\", easyClose = FALSE,\n        footer = tagList(modalButton(\"Cancel\"), actionButton(\"confirm_mapping\", \"Confirm mapping\", class = \"btn-primary\")),\n        fluidRow(\n          column(6, selectInput(\"map_term\", \"Term / Pathway column\", choices = names(rv$raw_df))),\n          column(6, selectInput(\"map_nes\",  \"NES / Score column (optional)\", choices = c(\"(none)\", names(rv$raw_df))))\n        ),\n        fluidRow(\n          column(6, selectInput(\"map_pval\", \"p-value column\", choices = names(rv$raw_df))),\n          column(6, selectInput(\"map_padj\",\"Adjusted p-value column (padj/FDR)\", choices = c(\"(none)\", names(rv$raw_df))))\n        ),\n        fluidRow(\n          column(6, selectInput(\"map_size\", \"Gene set size (optional)\", choices = c(\"(none)\", names(rv$raw_df)))),\n          column(6, selectInput(\"map_le\",   \"Leading edge (optional)\",   choices = c(\"(none)\", names(rv$raw_df))))\n        ),\n        tags$hr(), h5(\"Preview of uploaded table\"), DTOutput(\"preview_in_modal\"),\n        tags$small(\"Tip: You can adjust mappings later by re-uploading.\")\n      ))\n    }\n    \n    if (rv$mode == \"counts\") {\n      df_local <- isolate(rv$raw_df)\n      guess <- names(df_local)[1]\n      if (is.numeric(df_local[[1]])) {\n        nn <- names(df_local)[sapply(df_local, function(col) !is.numeric(col))]\n        if (length(nn)) guess <- nn[1]\n      }\n      showModal(modalDialog(\n        title = \"Select Gene ID Column (Counts)\", size = \"m\", easyClose = FALSE,\n        footer = tagList(modalButton(\"Cancel\"), actionButton(\"confirm_gene_map\", \"Confirm Gene ID\", class = \"btn-primary\")),\n        p(\"Choose the column that contains gene identifiers (e.g., Ensembl IDs or Symbols). All other columns will be treated as samples.\"),\n        selectInput(\"map_gene\", \"Gene ID column\", choices = names(df_local), selected = guess),\n        tags$hr(), h5(\"Preview of uploaded table\"), DTOutput(\"preview_in_modal_counts\"),\n        tags$small(\"You can change this by re-uploading the file.\")\n      ))\n    }\n  })\n  \n  observeEvent(input$confirm_sheet_pick, {\n    req(rv$file_path, rv$xlsx_sheets, input$sheet_pick)\n    rv$current_sheet <- input$sheet_pick\n    removeModal()\n    \n    # Read chosen sheet\n    df <- read_table_smart(rv$file_path, sheet = rv$current_sheet)\n    rv$raw_df <- as.data.frame(df)\n    rv$import_ok <- TRUE\n    \n    # Continue with mode-specific dialogs (same as in file_input handler)\n    if (rv$mode == \"gsea\") {\n      showModal(modalDialog(\n        title = \"Map columns (GSEA Results)\", size = \"l\", easyClose = FALSE,\n        footer = tagList(modalButton(\"Cancel\"), actionButton(\"confirm_mapping\", \"Confirm mapping\", class = \"btn-primary\")),\n        fluidRow(\n          column(6, selectInput(\"map_term\", \"Term / Pathway column\", choices = names(rv$raw_df))),\n          column(6, selectInput(\"map_nes\",  \"NES / Score column (optional)\", choices = c(\"(none)\", names(rv$raw_df))))\n        ),\n        fluidRow(\n          column(6, selectInput(\"map_pval\", \"p-value column\", choices = names(rv$raw_df))),\n          column(6, selectInput(\"map_padj\",\"Adjusted p-value column (padj/FDR)\", choices = c(\"(none)\", names(rv$raw_df))))\n        ),\n        fluidRow(\n          column(6, selectInput(\"map_size\", \"Gene set size (optional)\", choices = c(\"(none)\", names(rv$raw_df)))),\n          column(6, selectInput(\"map_le\",   \"Leading edge (optional)\",   choices = c(\"(none)\", names(rv$raw_df))))\n        ),\n        tags$hr(), h5(\"Preview of uploaded table\"), DTOutput(\"preview_in_modal\"),\n        tags$small(\"Tip: You can adjust mappings later by re-uploading.\")\n      ))\n    }\n    \n    if (rv$mode == \"counts\") {\n      df_local <- isolate(rv$raw_df)\n      guess <- names(df_local)[1]\n      if (is.numeric(df_local[[1]])) {\n        nn <- names(df_local)[sapply(df_local, function(col) !is.numeric(col))]\n        if (length(nn)) guess <- nn[1]\n      }\n      showModal(modalDialog(\n        title = \"Select Gene ID Column (Counts)\", size = \"m\", easyClose = FALSE,\n        footer = tagList(modalButton(\"Cancel\"), actionButton(\"confirm_gene_map\", \"Confirm Gene ID\", class = \"btn-primary\")),\n        p(\"Choose the column that contains gene identifiers (e.g., Ensembl IDs or Symbols). All other columns will be treated as samples.\"),\n        selectInput(\"map_gene\", \"Gene ID column\", choices = names(df_local), selected = guess),\n        tags$hr(), h5(\"Preview of uploaded table\"), DTOutput(\"preview_in_modal_counts\"),\n        tags$small(\"You can change this by re-uploading the file.\")\n      ))\n    }\n  })\n  \n  \n  # Previews\n  output$preview_in_modal         <- renderDT({ req(rv$raw_df); datatable(rv$raw_df, options = list(pageLength = 5,  scrollX = TRUE)) })\n  output$preview_in_modal_counts  <- renderDT({ req(rv$raw_df); datatable(rv$raw_df, options = list(pageLength = 5,  scrollX = TRUE)) })\n  output$preview_table            <- renderDT({ req(rv$raw_df); datatable(rv$raw_df, options = list(pageLength = 10, scrollX = TRUE)) })\n  \n  # Confirm GSEA mapping → standardized table\n  observeEvent(input$confirm_mapping, {\n    req(rv$raw_df)\n    term <- input$map_term\n    nes  <- if (identical(input$map_nes, \"(none)\"))  NA_character_ else input$map_nes\n    pval <- input$map_pval\n    padj <- if (identical(input$map_padj, \"(none)\")) NA_character_ else input$map_padj\n    size <- if (identical(input$map_size, \"(none)\")) NA_character_ else input$map_size\n    le   <- if (identical(input$map_le,   \"(none)\")) NA_character_ else input$map_le\n    \n    std <- data.frame(term = rv$raw_df[[term]], stringsAsFactors = FALSE)\n    if (!is.na(nes))  std$nes  <- suppressWarnings(as.numeric(rv$raw_df[[nes]]))\n    if (!is.na(pval)) std$pval <- suppressWarnings(as.numeric(rv$raw_df[[pval]]))\n    if (!is.na(padj)) std$padj <- suppressWarnings(as.numeric(rv$raw_df[[padj]]))\n    if (!is.na(size)) std$size <- suppressWarnings(as.integer(rv$raw_df[[size]]))\n    if (!is.na(le))   std$leadingEdge <- as.character(rv$raw_df[[le]])\n    \n    rv$gsea_std <- std\n    removeModal()\n  })\n  \n  # Confirm Gene ID mapping → build counts matrix\n  observeEvent(input$confirm_gene_map, {\n    req(rv$raw_df)\n    gid <- input$map_gene\n    validate(need(gid %in% names(rv$raw_df), \"Please select a valid Gene ID column.\"))\n    rv$gene_id_col <- gid\n    df <- rv$raw_df\n    sample_cols <- setdiff(names(df), gid)\n    validate(need(length(sample_cols) >= 2, \"Need at least two sample columns.\"))\n    mat <- suppressWarnings(apply(df[sample_cols], 2, function(x) as.numeric(x)))\n    mat <- as.matrix(mat)\n    rownames(mat) <- as.character(df[[gid]])\n    keep <- rowSums(!is.na(mat)) > 0\n    mat <- mat[keep, , drop = FALSE]\n    mat[is.na(mat)] <- 0\n    rv$counts_mat <- mat\n    removeModal()\n  })\n  \n  # Import actions\n  output$import_actions <- renderUI({\n    if (is.null(rv$raw_df)) return(NULL)\n    if (rv$mode == \"counts\") {\n      if (!is.null(rv$counts_mat)) {\n        actionButton(\"proceed_design\", \"Proceed to Design →\", class = \"btn-success\")\n      } else {\n        tags$small(\"Please confirm the Gene ID column to proceed.\")\n      }\n    } else {\n      if (!is.null(rv$gsea_std)) {\n        actionButton(\"proceed_gsea\", \"Proceed to GSEA →\", class = \"btn-success\")\n      } else {\n        tags$small(\"Please confirm column mapping to proceed.\")\n      }\n    }\n  })\n  \n  observeEvent(input$proceed_design, {\n    updateTabsetPanel(session, inputId = \"main_nav\", selected = \"Design\")\n    req(rv$counts_mat)\n    rv$sample_ids <- colnames(rv$counts_mat)\n    rv$design_df <- data.frame(\n      sample = rv$sample_ids, condition = NA_character_,\n      batch  = NA_character_, include = TRUE, stringsAsFactors = FALSE\n    )\n  })\n  \n  observeEvent(input$proceed_gsea, {\n    updateTabsetPanel(session, inputId = \"main_nav\", selected = \"GSEA\")\n  })\n}","type":"text"},{"name":"ui.R","content":"ui <- navbarPage(\n  title = tagList(\"Slimformer\", span(\"Web UI\", style = \"font-size: 0.7em; color: #666; margin-left: 6px;\")),\n  id = \"main_nav\",\n  collapsible = TRUE,\n  \n  tabPanel(\"Import\",\n           fluidPage(\n             sidebarLayout(\n               sidebarPanel(width = 4,\n                            radioButtons(\"import_mode\", \"Choose import mode:\",\n                                         choices = c(\"Counts (CSV/TSV/XLSX)\" = \"counts\", \"GSEA Results (CSV/TSV/XLSX)\" = \"gsea\"),\n                                         selected = \"counts\"\n                            ),\n                            fileInput(\"file_input\", \"Upload file\", accept = c(\".csv\", \".tsv\", \".tab\", \".xlsx\"), multiple = FALSE),\n                            uiOutput(\"import_help\"),\n                            tags$hr(),\n                            uiOutput(\"import_actions\")\n               ),\n               mainPanel(width = 8,\n                         h4(\"File preview\"),\n                         DT::DTOutput(\"preview_table\"),\n                         tags$hr(),\n                         uiOutput(\"import_status\")\n               )\n             )\n           )\n  ),tabPanel(\"Design\",\n             fluidPage(\n               h4(\"Design (Counts mode only)\"),\n               p(\"After uploading counts and selecting the Gene ID column, define sample metadata and build the model formula here.\"),\n               uiOutput(\"design_table_container\"),\n               fluidRow(\n                 column(6, textInput(\"design_formula\", label = \"Model formula\", value = \"~ condition\")),\n                 column(3, selectInput(\"condition_ref\", label = \"Reference level (condition)\", choices = NULL)),\n                 column(3, actionButton(\"design_apply\", \"Apply design\", class = \"btn-primary\"))\n               ),\n               uiOutput(\"design_info\")\n             )\n  ),\n  \n  tabPanel(\"DGEA\",\n           fluidPage(\n             h4(\"DGEA (Counts mode only)\"),\n             fluidRow(\n               column(3,\n                      selectInput(\"dgea_method\", \"Method:\", c(\"DESeq2\",\"limma-voom\",\"edgeR\"), selected = \"DESeq2\"),\n                      checkboxInput(\"dgea_use_batch\", \"Use batch column (if present)\", value = FALSE),\n                      actionButton(\"dgea_run\", \"Run analysis\", class = \"btn-primary\"),\n                      tags$hr(),\n                      sliderInput(\"dgea_padj_cut\", \"FDR cutoff\", min=0, max=0.2, value=0.05, step=0.005),\n                      sliderInput(\"dgea_lfc_cut\",  \"|log2FC| cutoff\", min=0, max=3, value=1, step=0.1)\n               ),\n               column(9, DT::DTOutput(\"dgea_table\"))\n             ),\n             tags$hr(),\n             fluidRow(\n               column(6, plotOutput(\"pca_plot\", height = 320)),\n               column(6, plotOutput(\"ma_plot\", height = 320))\n             ),\n             fluidRow(\n               column(6, plotOutput(\"volcano_plot\", height = 320)),\n               column(6, plotOutput(\"libsize_plot\", height = 320))\n             ),\n             fluidRow(\n               column(12, plotOutput(\"dist_heatmap\", height = 360))\n             )\n           )\n  ),\n  \n  tabPanel(\"GSEA\",\n           fluidPage(\n             h4(\"GSEA\"),\n             p(\"In Counts mode: build rankings → preranked GSEA (browser) or g:Profiler (ORA). In GSEA-upload mode: visualize directly.\"),\n             uiOutput(\"gsea_placeholder\")\n           )\n  ),\n  \n  tabPanel(\"Slimformer\",\n           fluidPage(\n             h4(\"Slimformer (GO:BP — Human)\"),\n             p(\"Disabled if GO:BP is not selected/available.\"),\n             uiOutput(\"slimformer_placeholder\")\n           )\n  ),\n  \n  tabPanel(\"Compare\",\n           fluidPage(\n             h4(\"Compare Datasets\"),\n             uiOutput(\"compare_placeholder\")\n           )\n  ),\n  \n  tabPanel(\"Export\",\n           fluidPage(\n             h4(\"Exports\"),\n             uiOutput(\"export_placeholder\")\n           )\n  ),\n  \n  tabPanel(\"Settings\",\n           fluidPage(\n             h4(\"Settings\"),\n             checkboxInput(\"consent_gprofiler\", \"Allow client-side calls to g:Profiler API (for ORA)\", value = FALSE),\n             uiOutput(\"settings_info\"),\n             actionButton(\"install_browser_pkgs\", \"Install analysis packages (browser)\", class = \"btn-primary\"),\n             tags$small(\" Installs DESeq2, limma, edgeR, fgsea, gprofiler2, ggplot2 in the ShinyLive webR runtime.\"),\n             tags$hr(),\n             verbatimTextOutput(\"pkg_install_status\")\n           )\n  ),\n  \n  tabPanel(\"About\",\n           fluidPage(\n             h4(\"About\"),\n             p(\"Version: skeleton v0.1.2 — Client-only prototype for GitHub Pages (ShinyLive).\")\n           )\n  )\n)","type":"text"},{"name":"DataImport/data_import_mod.R","content":"data_import <- function(input, output) {\n  \n}","type":"text"}]
